\documentclass[titlepage]{report}

\usepackage{graphicx}
\usepackage{float}
\usepackage{fancyhdr}

%\usepackage{lastpage} % for the number of the last page in the document
%\usepackage{fancyhdr}

\newlength\longest

\begin{document}

\title{Kiwi: Functional Composable R}
\author{Ryan Grannell}

\maketitle
\tableofcontents

\chapter{Introduction}

This vignette covers basic usage of Kiwi, as well as the design philosophy of the
framework.



\chapter{Collections}

\paragraph{}

The R language has a wealth of classes, including factors, data frames, matrices, lists, pairlists and vectors.
Kiwi unifies the latter three under the abstraction of a \textit{collection}. Collections are finite linear
ordered sequences of values. Lists, pairlists and atomic vectors are the most fundemental and flexible
classes, while less foundatial classes can have odd corner cases that hinder compositionality.

\paragraph{}
R functions can suffer from problems with genericity. For example, the function cumsum can work on both
lists and atomic vectors of numbers, but the function sum cannot sum a list of numbers.

\begin{verbatim}
    cumsum(list(1:10))
    55

    sum(list(1:10))
    Error in sum(list(1:10)) : invalid 'type' (list) of argument
\end{verbatim}

\paragraph{}
Kiwi smooths out the differences between lists and other vectors. The \textit{contents} of the container
is what Kiwi functions examine, not the container type. Functions that work on vectors will
always work on lists and pairlists.

\section{Types of Collection}

Atomic vectors are flat sequences of homogenously-typed values. There are several subtypes
of vector - logical, integer, double, complex, character (string) and raw (bytes). They cannot
have mixed types - each vector can only hold one type of value. Each element of an atomic
vector is length one. R is unusual as a language in that it has no lone numbers or strings -
every number or string is a length-one vector. Atomic vectors are internally represented
as doubly-linked lists.

\paragraph{}
Lists (also known as generic vectors) are potentially nested sequences of heterogenously-typed values.
They are less restrictive than atomic vectors in that they can contain other collections, and
can have mixed-type values. The downside for this extra flexibility is that lists use more
memory and are less performant than atomic vectors. Table \ref{table:memusage} shows the
comparative memory usage for the same dataset represented as an integer vector, a list and a pairlist.
For large flat datasets, lists take about fourtheen times more memory than atomic vectors.
\begin{table}
\begin{tabular}{l|llllll}
	data type & 1 & $10^{2}$ & $10^{3}$ & $10^{4}$ & $10^{5}$\\
	\hline
	integer & 48 & 88 & 440 & 4040 & 400,040\\
	list & 96 & 648 & 5640 & 56,040 & 5,600,040\\
	pairlist & 104 & 1040 & 10,400 & 104,000 & 10,400,000\\
\end{tabular}

\caption{Memory usage of the sequence 1...n in bytes}
\label{table:memusage}

\end{table}

\paragraph{}
Pairlists (also known as dotted pair lists) are the least useful and rarest collections in R - the value
NULL aside. They are poorly supported by base functions, but are used internally by R for function parametre
lists. Unlike lists, they can have empty named arguments, which makes them useful for representing argument
lists with optional arguments. Internally pairlists are represented as singly-linked lists.

\section{Collection Comprehensions}

Collection comprehensions provide syntactic sugar for defining collections by providing the contraints
that each element must satisfy to be a member of the collection. These are a translation of set-builder
notation, which defines a set in terms of membership constraints. The comprehension

\begin{equation} \label{eq:comprehensions-squares}
xList[x^{2},\ x\ \leftkiwi\ 1..10,\ x\ \%\%\ 2 ==\ 0 ]
\end{equation}

\paragraph{}
translates to \"the list of values x squared such that x is evenly
divisible by 2, for x in 1, 2, ..., 10\". The values $x$ in 1..10 are tested to check if they are
evenly divisible by 2. Finally, the values are squared, added to a list, and returned. An equivalent
comprehension in set-builder notation is

\begin{equation} \label{eq:setbuilder-squares}
\{x^{2} \mid x\ \epsilon\ \{1..10\} \land\ x\ mod\ 2\ =\ 0 \}
\end{equation}

\paragraph{}
Collection comprehensions are made of three elements - a yield expression, binding expressions, and a
predicate expression (optional).

\subsection{Binding Expressions}

Binding expressions determine what parametres are added to the yield and predicate expressions. They
have two parts; a symbol dictating what to bind, and a collection of values that binding may have. At
runtime

\begin{equation} \label{eq:comprehension-sum}
xList[\ x\ +\ y,\ x\ \leftkiwi\ 1:10,\ y\ \leftkiwi\ 1:10\ ]
\end{equation}

\paragraph{}
essentially gets transformed to

\begin{equation} \label{eq:comprehension-sum-tranformed}
xList[(x\ :\ y)\ :=\ x\ +\ y,\ 1:10,\ 1:10\ ]
\end{equation}

\paragraph{}
before feeding the yield expression each combination of values from the value part
of the binding expressions.

\subsection{The Yield \& Predicate Expressions}

The yield expression is a transformation that is applied to each eligable combination of values
drawn from the binding expressions. The predicate expression is the test for eligability.

\paragraph{}

\begin{equation} \label{eq:comprehension-letters}
xList[toupper(letters),\ letter\ \leftkiwi\ letters]
\end{equation}

\paragraph{}
Program \ref{eq:comprehension-letters} demonstrates how a yield transformation is applied to each
letter from the set of letters, yielding an uppercase set of letters. The above comprehension is
essentially transformed to

\begin{equation} \label{eq:comprehension-letters-transformed}
xList[letter\ :=\ toupper(letters),\ letters,\ letter\ :=\ True]
\end{equation}

\paragraph{}
internally. When no predicate expression is provided it defaults to the predicate xTruth - a function
that is always true. A user can optionally provide a more selective membership test.

\begin{equation} \label{eq:comprehension-letters-pred}
xList[toupper(letters),\ letter\ \leftkiwi\ letters,\ is.element(letter,\ letters[1:10])]
\end{equation}

\section{Collection Operations}

Kiwi has a wide range of collection operations. Most of these functions are general and
have many non-specific use cases. They tend to be used for reshaping, subsetting and
performing set operations on data. Higher-order functions on collections will be
details in the chapter \"Functions\". Some of the key functions are covered below.

\subsection{Subsetting}

\paragraph{xInit, xRest, xFirstOf_xFourthOf \& xLastOf}
These functions select parts of a collection positionally.


\begin{verbatim} \label{eq:pos-selectors}
xFirstOf(letters)
'a'
xLastOf(letters)
'z'
\end{verbatim}

\paragraph{}
xFirstOf throws an error
if called on an empty collection.  xFirstOf returns a
value from inside the collection: empty collections have no values.
For similar reasons xSecondOf_xFourthOf and xLastOf throws an error if their
inputs are two short.

\paragraph{}
xInit and xRest return collections with all but the last, and all but the first
elements respectively.


\chapter{Functions}

Functions are mathematical objects that relate each input to one fixed output.

\paragraph{}
Not all R or Kiwi functions are mathematical functions. For example,
xOneOf takes a collection and returns a random value from the collection. Although
it associates each input (a collection) with an output (an element from the collection),
the output may differ for the same input. This means that xOneOf is an impure function.

\paragraph{}
Functions like print, readLines and dput are impure.


\chapter{Text Processing}

\paragraph{}
Kiwi has a range of functions for working with text data. Generally text data will be
used as lines, words or individual characters.

\section{Reading \& Writing Text}

xReadLines pulls text from a file as a character vector, with each line being interpreted
as an element of that vector. There are similar functions for words and individual
characters. Several file-formats are newline delimited, including R's namespace files.

\paragraph{}

\begin{equation}\label{eq:read-lines}
	xReadLines("war-and-peace.txt")
\end{equation}

\paragraph{}

The logical counterpart to xReadLines is xWriteLines, which outputs a vector of lines
to a file. Again, similar functions exist for words and characters.


\begin{equation}\label{eq:write-lines}
	xWriteLines("my-novel.txt", c("A\ long\ time\ ago,\ "\ "the\ end"))
\end{equation}

\paragraph{}

A string may need to be converted between representations. The function xToWords
will take a single string and split it into each word.

Strings can be switched between word, line, and character representations. This
is accomplished with the xTo* and xFrom* family of functions.

\begin{equation}\label{eq:to-words}
	xToWords("I\ know\ all\ the\ words"))
\end{equation}

\paragraph{}

The inverse of this operation is xFromWords, which delimits a vector of words with a space.

\section{Splitting \& Joining Text}

Strings can be split or joined using the function xExplode and xImplode, respectively.

\begin{equation}\label{eq:to-csv}
	as\_csv \leftkiwi strs\ :=\ xImplode(", ",\ strs)
\end{equation}

\paragraph{}

Program \ref{eq:to-csv} partially applies xImplode to collapse a collection of strings
with a comma-delimiter. A (rough) inverse function can be created by partially-applying
xExplode with the same delimiter.

\begin{equation}\label{eq:from-csv}
	from\_csv \leftkiwi strs\ :=\ xExplode(", ",\ strs)
\end{equation}

\paragraph{}
These functions are similar to paste and splitstring from the base libraries.








\chapter{Values}

A key concept in functional programming is \textit{referential transparency}. Simply put
an expression is transparent if swapping the expression with its evaluated
result doesn't change the meaning of the program.

\begin{verbatim} \label{eq:quote-equal}
summed <- sum(1:3)
sumexpr <- quote(sum(1:3))

eval(sumexpr) == summed
\end{verbatim}

\paragraph{}
The sum of a list of numbers or the inverse of a matrix doesn't vary over the lifespan of a program.
Not all functions are transparent. IO operations like reading a file, operating sytem functions like Sys.time,
and random-number generators can respond differently each time they're called.  A random-number
generator that returned the same number over and over would be transparent, if not very useful.

\paragraph{}
Normal assignment is not referentially transparent because the value associated with
a variable depends on its history. Variables can be deleted and modified during the course
of a program, and the double-edge sword \'<<- \' can modify variables across functions.

\paragraph{}
Kiwi wraps a self-described \'experimental interface\' in R to add immutable values to R. R
technically has values, but the functions that implement them are deeply unfriendly. These functions
lock variables after creation, stopping them being altered. This adds a degree
of referential transparency to data, making it easier to reason about what is and isn\'t
happening in a program.

\paragraph{}
Using values instead
of values removes an entire class of bugs - accidental altered variables. Several important constants in R
are not locked - T, F, letters, and pi can be modified at any point in particular. The former two
are particularily troubling, since matrices tend to named with a single uppercase letter. If these variables
were locked as value they couldn't be altered.

\paragraph{}
Conceptually, values are aliases to a literal piece of data. An attempt to modify the alias makes
as much sense as the assignment $1\ =\ 2$. Any attempt to modify a value results in an error
being thrown.

\section{Creation \& Convertion}

Values can be created in one of two ways - by directly assigning, or by converting
an existing variable to a value. The syntax for directly assigning a value
is currently

\begin{equation} \label{eq:comprehension-letters-pred}
xVal(pi,\ 3.1415)
\end{equation}

\paragraph{}
though it may change at some point in the future. This creates a variable in the invoking environment,
just like normal R assignment.

\paragraph{}
Existing variables may also be converted to values

\begin{equation} \label{eq:comprehension-letters-pred}
xAsVal(pi)
\end{equation}

\paragraph{}
and values may be converted back into variables

\begin{equation} \label{eq:comprehension-letters-pred}
xAsVar(pi)
\end{equation}

\paragraph{}
A combination of the latter two functions can be used to enforce selective access to a
piece of data.

\end{document}
