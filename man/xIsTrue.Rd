% Generated by roxygen2 (4.0.1.99): do not edit by hand
\name{xIsTrue}
\alias{xIsTrue}
\title{xIsTrue}
\usage{
xIsTrue(val)
}
\arguments{
\item{val}{an arbitrary value. The value to test for being true.}

\item{...}{see above.}
}
\value{
A true or false value.
}
\description{
Is an value true?
}
\details{
\bold{xIsTrue} is primarily meant for use with conditional
    statements like if and while. \bold{xIsTrue} always returns a
    length-one true or false value; conditional statements throw an error
    if they are given a length zero logical vector.

    The below example will throw an error; xAnyOf of an empty list is
    logical zero, which if cannot handle:

    \code{mybool <- xAnyOf(xI, list())}

    \code{if (mybool) 1 else 2}

    The correct way to test for truth in Kea is \bold{xIsTrue}, which will
    return false in this case since logical zero isn't the value true.

    \code{if (xIsTrue(mybool)) 1 else 2}
}
\section{Type Signature}{

    any -> <logical>
}

\section{Corner Cases}{

    xIsTrue returns either true or false, to make it
    safe for use with if statements. If val is length zero
    False is returned.
}
\examples{

# 1.
# xIsTrue is the safe way to check if a condition is true
# in an if statement:
#
# an unfortunate side-effect of R's vectorisation and
# three-value logic (True, False, Na) is that the values
# logical(0) or NA can pop up in unexpected places.
#
# xIsTrue guarantees one of two values are returned; true or false.
#
# this gets rid of the undesired error thrown if
# logical(0) or NA is returned.

if ( xIsTrue(logical(0)) ) {
	stop("this will not be executed")
}

if ( xIsTrue(NA) ) {
	stop("this will not be executed")
}

# either
#
# if (logical(0)) {}
#
# or
#
# if (NA) {}
#
# will break
}
\seealso{
Other value_testing_functions: \code{\link{xIsEmpty}},
  \code{\link{xIsEmpty_}}; \code{\link{xIsFalse}};
  \code{\link{xIsInfixOf}}, \code{\link{xIsInfixOf_}};
  \code{\link{xIsNan}}; \code{\link{xIsNa}};
  \code{\link{xIsNull}}; \code{\link{xIsPrefixOf}},
  \code{\link{xIsPrefixOf_}}; \code{\link{xIsSuffixOf}},
  \code{\link{xIsSuffixOf_}}; \code{\link{xIs}};
  \code{\link{xNotEmpty}}, \code{\link{xNotEmpty_}};
  \code{\link{xNotFalse}}; \code{\link{xNotInfixOf}},
  \code{\link{xNotInfixOf_}}; \code{\link{xNotNan}};
  \code{\link{xNotNa}}; \code{\link{xNotNull}};
  \code{\link{xNotPrefixOf}}, \code{\link{xNotPrefixOf_}};
  \code{\link{xNotSuffixOf}}, \code{\link{xNotSuffixOf_}};
  \code{\link{xNotTrue}}; \code{\link{xNot}}
}

