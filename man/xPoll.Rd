% Generated by roxygen2 (4.0.1.99): do not edit by hand
\name{xPoll}
\alias{xPoll}
\alias{xPoll_}
\title{xPoll}
\usage{
xPoll(pred, coll)

xPoll_(pred, ...)
}
\arguments{
\item{pred}{a unary predicate function. The function with
   which to poll each element of the input collection.}

\item{coll}{a collection. The collection to poll.}

\item{...}{see above.}
}
\value{
A non-negative whole number.
}
\description{
Count the number of times a function returns
true when mapped over a collection.
}
\section{Type Signature}{

    (any -> <logical>) -> |any| -> <integer>
}

\section{Corner Cases}{

   Returns integer(0) when given an empty collection, and zero
   if no matches are found.
}
\examples{

# 1. HackerRank Functional Programming
#    Count the number of elements in a list without using length

# This problem is simple, but involves a slight misuse of xPoll. xPoll checks
# each element of a collection with a function and counts the number of times that
# predicate returns true. If we force every element polled to return true we
# can count the number of elements in a collection.

# xK(TRUE) returns a function that always returns TRUE. If we partially apply
# xPoll with this predicate we have a new length function.

lenof <- xFix_(xPoll, pred = xK(TRUE))

lenof(c(1,2,3,4))
# 4
}
\seealso{
Other math_functions: \code{\link{xLenOf}},
  \code{\link{xLenOf_}}; \code{\link{xMaxBy}},
  \code{\link{xMaxBy_}}; \code{\link{xMeanBy}},
  \code{\link{xMeanBy_}}; \code{\link{xMedianBy}},
  \code{\link{xMedianBy_}}; \code{\link{xMinBy}},
  \code{\link{xMinBy_}}; \code{\link{xOrderOf}},
  \code{\link{xOrderOf_}}; \code{\link{xProdBy}},
  \code{\link{xProdBy_}}; \code{\link{xRank}},
  \code{\link{xRank_}}; \code{\link{xSumBy}},
  \code{\link{xSumBy_}}

Other quantifier_functions: \code{\link{xAllOf}},
  \code{\link{xAllOf_}}; \code{\link{xAnyOf}},
  \code{\link{xAnyOf_}}; \code{\link{xNoneOf}},
  \code{\link{xNoneOf_}}
}

