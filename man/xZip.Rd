% Generated by roxygen2 (4.0.1): do not edit by hand
\name{xZip}
\alias{xZip}
\alias{xZip_}
\title{xZip}
\usage{
xZip(colls)

xZip_(...)
}
\arguments{
\item{colls}{a collection of collections of equal lengths.
   The collections to zip together.}

\item{...}{see above.}
}
\value{
Returns a list of lists.
}
\description{
Transpose a collection of collections.
}
\details{
\bold{xZip} converts the 'columns' of a collection of
   collections (each inner collection) to 'rows.'

   \code{coll <- list( list(1, 2, 3), list('a', 'b', 'c') )}

   \code{xZip(coll)}

   \code{list( list(1, 'a'), list(2, 'b'), list('c') )}

   In the above case the 'columns' - a list of numbers and
   a list of letters - were zipped into corresponding 'rows'
   of a number and a letter.

   \bold{xZip} is an involution - a function that is its own
   inverse. For any collection, \bold{xZip(xZip(coll))}
   is the original collection.

   Applying \bold{xZip} again will reconvert the 'rows'
   back into columns.

   \code{coll <- list( list(1, 2, 3), list('a', 'b', 'c') )}

   \code{xZip(coll)}
}
\section{Type Signature}{

    ||any|| -> ||any||
}

\section{Corner Cases}{

   The empty list is returned if the shortest collection
   has length-zero, or no collections are included.
}
\examples{

# 1. Working with csv data.
#
# seperate a csv of country,median age pairs
# into a list of countries and ages.
# this is a nicer format for Kiwi to work with
# than a string or data.frame.

csv <- "Monaco,48.9,Japan,44.6,Italy,44.3,Germany,43.7,Jersey,43.4"

x_(csv) $ xExplode(',') $ xChunk(2) $ xZip() $
x_AddKeys(c('country', 'age'))

# list(
#     country =
#     list(
#         "Monaco",
#         "Japan",
#         "Italy",
#         "Germany",
#         "Jersey"),
#     age =
#     list(
#         "48.9",
#         "44.6",
#         "44.3",
#         "43.7",
#         "43.4"
# ))

}
\seealso{
Other reshaping_functions: \code{\link{xAppend}},
  \code{\link{xAppend_}}; \code{\link{xChop}},
  \code{\link{xChop_}}; \code{\link{xChunk}},
  \code{\link{xChunk_}}; \code{\link{xFlatten}},
  \code{\link{xFlatten_}}; \code{\link{xGroupBy}},
  \code{\link{xGroupBy_}}; \code{\link{xJoin}},
  \code{\link{xJoin_}}; \code{\link{xOneOf}},
  \code{\link{xOneOf_}}; \code{\link{xPrepend}},
  \code{\link{xPrepend_}}; \code{\link{xRepeat}},
  \code{\link{xRepeat_}}; \code{\link{xReverse}},
  \code{\link{xReverse_}}; \code{\link{xShuffle}},
  \code{\link{xShuffle_}}; \code{\link{xSortBy}},
  \code{\link{xSortBy_}}; \code{\link{xTabulate}},
  \code{\link{xTabulate_}}; \code{\link{xUnzipIndices}},
  \code{\link{xUnzipIndices_}}; \code{\link{xUnzipKeys}},
  \code{\link{xUnzipKeys_}}; \code{\link{xZipKeys}},
  \code{\link{xZipKeys_}}
}

