% Generated by roxygen2 (4.0.1.99): do not edit by hand
\name{xFix}
\alias{xFix}
\alias{xFix_}
\title{xFix}
\usage{
xFix(fn, coll)

xFix_(fn, ...)
}
\arguments{
\item{fn}{an arbitrary function. The function to have some
   of its arguments fixed.}

\item{coll}{a collection. The arguments to fix.}

\item{...}{see above.}
}
\value{
A function of equal or lesser arity to \bold{fn}.
}
\description{
Fix several arguments of a function, producing a function of smaller arity.
}
\details{
Partial application is a mechanism for specialising a general function
    to a particular purpose. For example, the very general function \bold{xMap}
    can be easily specialised to particular tasks using \code{xFix}:

    \code{lengths <- xFix(xMap, list(fn = length))}

    \code{sizes <- xFix(xMap, object.size))}

    In this case the use of xFix can match the argument to specialise by
    name, or by position. The use of \bold{xFix} over \bold{xFix_} is
    required in the first case, to avoid a parametre name class between the argument of
    \bold{xMap} to fix (fn) and the function passed to \bold{xFix} (fn).
}
\section{Type Signature}{

    function -> |any| -> function
}

\section{Corner Cases}{

   Partial application also works for ellipses (eg list(... = 1)).
}
\examples{

# 1. A simple example of specialisation.
#
# xFix can be used to take a general function like add
# and create more specific instances of it; for example
# the general function 'add' can be specialised into
# increment, decrement, and addtwo.

add <- function (a, b) a + b

increment <- xFix(add, c(a = 1))

# the variadic form is often more useful.

decrement <- xFix_(add, -1)
addtwo <- xFix_(add, 2)

increment(0)

# 1

decrement(0)

# this specialisation of general functions is one of the most powerful techniques in
# functional programming.

# -1

# 2. Recursion!
#
# This may not be the most useful example, but I thought it was interesting.
# if you partially apply the Fix function itself with identity as its first argument,
# it creates the constant function: the function that takes a value and returns
# a function that always returns that value.
#
# (constant (xCapture) can be defined in easier ways though)

constant = xFix_(xFix_, xIdentity)

five <- constant(5)
five()

# 3. Avoiding Anonymous Functions
#
# Partial application cuts down the number of small anonymous functions you need.
# The following example matches every species from the genus 'Homo' (H. )
#

x_(c('H. ergaster', 'H. habilis', 'H. sapiens', 'C. elegans')) $
x_Select(xFix(xIsMatch, 'H[.] '))

# list('H. ergaster', 'H. habilis', 'H. sapiens')

# Only use partial application like this if improves readability or
# shortens code significantly.
}
\seealso{
Other function_modifying_functions: \code{\link{\%and\%}},
  \code{\link{\%or\%}}, \code{\link{xLift}},
  \code{\link{xLift_}}; \code{\link{\%then\%}},
  \code{\link{xCompose}}, \code{\link{xCompose_}};
  \code{\link{xCapture}}, \code{\link{xK}};
  \code{\link{xDelay}}; \code{\link{xJuxtapose}},
  \code{\link{xJuxtapose_}}; \code{\link{xNegate}};
  \code{\link{xSpread}}; \code{\link{xThread}},
  \code{\link{xThread_}}; \code{\link{xUnspread}}

Other parametre_functions: \code{\link{xArityOf}};
  \code{\link{xFormalsOf}}; \code{\link{xIsVariadic}};
  \code{\link{xParamsOf}}; \code{\link{xSpread}};
  \code{\link{xUnspread}}
}

