% Generated by roxygen2 (4.0.1.99): do not edit by hand
\name{xDo}
\alias{xDo}
\alias{xDo_}
\title{xDo}
\usage{
xDo(fn, coll)

xDo_(fn, ...)
}
\arguments{
\item{fn}{a unary function, usually side-effectful.}

\item{coll}{a collection}

\item{...}{see above.}
}
\value{
A list.
}
\description{
Map (a possibly side-effectful) function over a
collection and discard the results.
}
\details{
\bold{xDo} is superficially similar to \bold{xMap}, in that
    it applies a function to each element of a collection. However
    \bold{xDo} does not accumulate a result, so it is more memory-efficient
    and faster at executing side-effectful functions than \bold{xMap}.
}
\section{Type Signature}{

    (any -> any) -> |any| -> {}
}
\examples{

#1. print the files in your current directory.

xDo(print, list.files('.'))

#    or

x_(list.files('.')) $ xDo(print)

#    or even

xDo(print \%of\% list.files, '.')

#2. plot a trig function.

plot(
    0, 0,
    xlim = c(0, 10),
    ylim = c(-10, 10),
    type = 'n')

xDo(
    x := {
        y <- tan( sin( x ) / cos( x )^2 )
        points(x, y)

    },
    (1:1000) / 100
)

#3. HR Functional Programming
#   Print "Hello World" n times

# xDo is Kiwi's construct for mapping over a collection
# and discarding the result, for use with side-effectful
# functions. An anonymous function or print composed with
# a constant function can be used to print the actual message.

n <- 5

xDo(print \%of\% xK('hello'), 1:n)
xDo(num := print('hello'),  1:n)

}
\seealso{
Other inpure_functions: \code{\link{xDelay}};
  \code{\link{xExecute}}; \code{\link{xRead}};
  \code{\link{xStopwatch}}; \code{\link{xVersion}};
  \code{\link{xWrite}}
}

