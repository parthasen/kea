% Generated by roxygen2 (4.0.1.99): do not edit by hand
\name{xIsPrefixOf}
\alias{xIsPrefixOf}
\alias{xIsPrefixOf_}
\title{xIsPrefixOf}
\usage{
xIsPrefixOf(coll1, coll2)

xIsPrefixOf_(coll1, ...)
}
\arguments{
\item{coll1}{a collection. The prefix to test for.}

\item{coll2}{a collection. The collection to test for a prefix.}

\item{...}{see above.}
}
\value{
A boolean value.
}
\description{
Is a collection a prefix of another?
}
\section{Type Signature}{

    |any| -> |any| -> <logical>
}

\section{Corner Cases}{

   If the first collection is longer than the second, False is returned.
   If either collection is length-zero, \bold{logical(0)} is returned.
}

\section{Rcpp}{


    This function is written using C++, and should be quite performant.
}
\examples{

# 1. A toy example.

xIsPrefixOf(1:3, 1:4)

# True

# 2. select paths with a certain string prefix

paths <- c('/path/dir-one/file-one', '/path/dir-one/file-two', '/path/dir-two/')

x_(paths) $ xMap(xToChars) $ xSelect(
	xIsPrefixOf(
		xToChars('/path/dir-one/') )) $
x_Map(xFromChars)

# list("/path/dir-one/file-one", "/path/dir-one/file-two")

# alternatively, you can use xIsMatch to find string matches.
# this is only a toy example; you should use .Platform $ file.sep instead of
# writing slashes into the paths directly.
}
\seealso{
Other value_testing_functions: \code{\link{xIsEmpty}},
  \code{\link{xIsEmpty_}}; \code{\link{xIsFalse}};
  \code{\link{xIsInfixOf}}, \code{\link{xIsInfixOf_}};
  \code{\link{xIsNan}}; \code{\link{xIsNa}};
  \code{\link{xIsNull}}; \code{\link{xIsSuffixOf}},
  \code{\link{xIsSuffixOf_}}; \code{\link{xIsTrue}};
  \code{\link{xIs}}; \code{\link{xNotEmpty}},
  \code{\link{xNotEmpty_}}; \code{\link{xNotFalse}};
  \code{\link{xNotInfixOf}}, \code{\link{xNotInfixOf_}};
  \code{\link{xNotNan}}; \code{\link{xNotNa}};
  \code{\link{xNotNull}}; \code{\link{xNotPrefixOf}},
  \code{\link{xNotPrefixOf_}}; \code{\link{xNotSuffixOf}},
  \code{\link{xNotSuffixOf_}}; \code{\link{xNotTrue}};
  \code{\link{xNot}}
}

