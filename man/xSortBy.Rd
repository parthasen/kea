% Generated by roxygen2 (4.0.1.99): do not edit by hand
\name{xSortBy}
\alias{xSortBy}
\alias{xSortBy_}
\title{xSortBy}
\usage{
xSortBy(fn, coll)

xSortBy_(fn, ...)
}
\arguments{
\item{fn}{a function that returns a number. The measure of an elements size.}

\item{coll}{a collection. The collection to sort.}

\item{...}{see above.}
}
\value{
A list
}
\description{
Sort a collection by the output of a function applied to each element.
}
\details{
\bold{xSortBy} allows a collection to be sorted by a custom
    measure of size. A typical use is sorting a collection of collections
    (analogous to a data frame) by a particular column.

    \code{coll <- list(list('key1', 10), list('key2', 12), list('key3', 0))}

    \code{xSortBy(xSecondOf, coll)}

    \code{list(list("key2", 12), list("key1", 10), list("key3", 0))}

    In the above example several rows of collection of collections are rearranged
    by the value in one of their columns.
}
\section{Type Signature}{

   (any -> &lt;number>) -> |any| -> |any|
}

\section{Corner Cases}{

   If \bold{coll} is a empty collection the empty list is returned. Throws an error if
   \bold{fn} returns Na or NaN or a non length-one-numeric value.
}
\examples{

# 1. k-nearest neighbours
#   is a patient diabetic?

# ------------- observations ------------- #
#
# the patient in question has a fasting blood glucose level
# of 135 mL / dL, and we also have data on the blood sugar
# of diabetic and non-diabetic individuals.
#
# By finding the most similar blood glucose levels and checking
# whether the people with those readings were or weren't diabetic.

blood_glucose <- 135

patients_data <-
	xZip_(
		'mg per dl (fasting)' =
			c(130, 137, 139, 140, 141, 137, 127, 143, 135, 127,
				77, 79, 79, 79, 88, 87, 95, 82, 93, 94),
		'category' =
			xJoin_(xRepeat(10, 'diabetic'), xRepeat(10, 'non-diabetic'))
	)

# shuffle the rows of the data.
patients_data <- xShuffle(patients_data)

k_nearest <- (dist : point : training) := {
	# classification.
	# given training points to test against,
	# classify a point based on its nearest neighbours.

	k <- floor( sqrt(xLenOf(training)) )

	dist_to_test_point <- xFix_(dist, point)

	distances <-
		x_(training) $ xMap(xAtKey('mg per dl (fasting)')) $
		xMap(dist_to_test_point) $ x_AsDouble()

	# rank the distances from closest to furthest.
	nearest <- x_(training) $ xSlice(xWhere(xRank(distances) <= k))

	# get the frequencies of the categories among the closest.
	category_frequencies <-
		nearest $ xMap(xAtKey('category')) $ xTabulate() $ x_SortBy(xSecondOf)

	# select the name of the most frequent category
	xFirstOf(xFirstOf(category_frequencies))
}

k_nearest(
	(x1 : x2) := abs(x1 - x2), blood_glucose, patients_data)

# 'diabetic'

# 2. CodeEvalGet the N longest lines
#    text from Wikipedia

paragraph <-
	xFromLines_(
		"line one",
		"line two",
		"line three",
		"line four",
		"line five",
		"line six",
		"line seven"
	)

x_(paragraph) $ xToLines() $ xSortBy(nchar) $ xReverse() $ x_Take(3)

# list("line seven", "line three", "line five")

# 3. CodeEvalHow many ways do numbers drawn from an
#    array sum to zero?

nums <- c(-2, 2, -4, 2, -2, -6)

x_(xProdSetOf_(nums, nums, nums, nums)) $
xSelect(
	xs := {
		(unlist \%then\% sum)(xs) == 0
	}
) $
x_DistinctOf()

# list(
#     list(2, 2, -2, -2), list(2, -2, 2, -2),
#     list(-2, 2, 2, -2), list(2, -2, -2, 2),
#     list(-2, 2, -2, 2), list(-2, -2, 2, 2),
#     list(-6, 2, 2, 2),  list(2, -6, 2, 2),
#     list(2, 2, -6, 2),  list(2, 2, 2, -6)
# )
}
\seealso{
Other reshaping_functions: \code{\link{xAppend}},
  \code{\link{xAppend_}}; \code{\link{xChop}},
  \code{\link{xChop_}}; \code{\link{xChunk}},
  \code{\link{xChunk_}}; \code{\link{xFlatten}},
  \code{\link{xFlatten_}}; \code{\link{xGather}},
  \code{\link{xGather_}}; \code{\link{xGroupBy}},
  \code{\link{xGroupBy_}}; \code{\link{xJoin}},
  \code{\link{xJoin_}}; \code{\link{xOneOf}},
  \code{\link{xOneOf_}}; \code{\link{xPrepend}},
  \code{\link{xPrepend_}}; \code{\link{xRepeat}},
  \code{\link{xRepeat_}}; \code{\link{xReverse}},
  \code{\link{xReverse_}}; \code{\link{xShuffle}},
  \code{\link{xShuffle_}}; \code{\link{xTabulate}},
  \code{\link{xTabulate_}}; \code{\link{xUnzipIndices}},
  \code{\link{xUnzipIndices_}}; \code{\link{xUnzipKeys}},
  \code{\link{xUnzipKeys_}}; \code{\link{xZipKeys}},
  \code{\link{xZipKeys_}}; \code{\link{xZip}},
  \code{\link{xZip_}}
}

